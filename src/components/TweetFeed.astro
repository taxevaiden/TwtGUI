---
//what an entry SHOULD look like..
interface TimelineEntry {
  user: string;
  time: string;
  message: string;
}

//fetch timeline with the Cool api endpoint i made :3
async function fetchTimeline(
    url: string = "http://localhost:8080/timeline.txt"
): Promise<string> {
    try {
        const response = await fetch(url);

        if (!response.ok) {
            console.error(
                `Failed to fetch timeline. Status: ${response.status} ${response.statusText}`
            );
            return "Failed to fetch timeline.";
        }

        const timeline = await response.text();
        return timeline;
    } catch (error) {
        console.error("Error fetching timeline:", error);
        return "Failed to fetch timeline due to an error.";
    }
}

//format the message so that links automatically turn into <a> elements
function formatLinks(message: string): string {
    // Regular expression to match URLs
    const urlRegex = /https?:\/\/[^\s]+/g;

    // Replace the matched URLs with anchor tags
    let formattedMessage = message.replace(urlRegex, (url) => {
        return `<a href="${url}" target="_blank">${url}</a>`;
    });

    formattedMessage = '<p class="pl-4">' + formattedMessage + '</p>'; //put it all into a <p> element so uh styling works

    return formattedMessage;
}

//format the timeline, turns it into a nice format just like TimelineEntry
function formatTimeline(timeline: string): TimelineEntry[] {
    // Replace `âž¤` with `➤`
    const cleanedTimeline = timeline.replace(/âž¤/g, "➤");

    // Split entries based on `➤`
    const entries = cleanedTimeline.split("➤").slice(1); // Ignore the first empty split

    // Format each entry
    const formattedEntries = entries
        .map((entry): TimelineEntry | null => {
            // Match the pattern with user, time, and message. Handle multiline messages.
            const match = entry.match(/^(.*?)\s\((.*?)\):\s([\s\S]+)/); // Match user, time, and message

            if (match) {
                const [, user, time, message] = match;

                const formattedMessage = formatLinks(message);

                return {
                    user: user.trim(),
                    time: time.trim(),
                    message: formattedMessage.trim(),
                };
            }

            return null; // Skip invalid entries
        })
        .filter((entry): entry is TimelineEntry => entry !== null); // Filter out null entries

    return formattedEntries.length > 0 ? formattedEntries : [{ user: "No valid entries", time: "", message: "No valid entries found." }];
}

//we fetch the timeline,
const timeline = await fetchTimeline();
const formattedTimeline = formatTimeline(timeline); //and then we format
console.log(formattedTimeline); //console.log for debugging i'm gonna remove this later
---

<div>
    <!-- take in every entry and turn it into elements :) -->
    {
        formattedTimeline.map((entry) => (
            <div class="p-4 border border-green-200 shadow-border mb-4">
                <p><strong>{entry.user}</strong> ({entry.time}):</p>
                <span set:html={entry.message}></span> {/* set html directly so <a> elements and <p> elements work */}
            </div>
        ))
    }
</div>
